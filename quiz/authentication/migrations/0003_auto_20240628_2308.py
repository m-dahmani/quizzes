# Generated by Django 4.2.13 on 2024-06-28 23:08
from django.core.management.sql import emit_post_migrate_signal
from django.db import migrations


def create_quizmasters_group(apps, schema_migration):
    """The function who will create the quizmasters  groups
       the create_groups function assigns existing users to the appropriate groups during migration"""

    # ensure that permissions have been created
    emit_post_migrate_signal(verbosity=1, interactive=False, db='default')

    # we cannot access models directly from imports, use the apps.get_model() function to retrieve them
    User = apps.get_model('authentication', 'User')
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')

    # Each model created in Django has four permissions which are generated in parallel.
    # Get Permissions for quiz model
    add_quiz = Permission.objects.get(codename='add_quiz')
    change_quiz = Permission.objects.get(codename='change_quiz')
    delete_quiz = Permission.objects.get(codename='delete_quiz')
    view_quiz = Permission.objects.get(codename='view_quiz')

    # Get permissions for quiz model
    quizmasters_permissions = [add_quiz, change_quiz, delete_quiz, view_quiz]

    # Get creators groups
    # Using get_or_create to ensure the 'quizmasters' group is created if it does not already exist
    quizmasters, created = Group.objects.get_or_create(name='quizmasters')
    # Assign permissions to the quizmasters groups
    # The set method replaces all current permissions in the group with the specified ones
    # The add method would add permissions to those already present
    quizmasters.permissions.set(quizmasters_permissions)

    # Create the quizmasters group
    # quizmasters = Group(name='quizmasters')
    # quizmasters.save()
    # Assign permissions to the moderators groups
    # quizmasters.permissions.set(quizmasters_permissions)

    # Assign existing users to the appropriate groups during migration
    # users = User.objects.filter(role='QUIZMASTER') => users = User.objects.all() & if user.role == 'QUIZMASTER':
    users = User.objects.all()
    for user in users:
        if user.role == 'QUIZMASTER':
            # assign existing users in the database with the Group.user_set.add() function
            quizmasters.user_set.add(user)


class Migration(migrations.Migration):
    # list the migrations that must be executed before this one
    dependencies = [
        ("authentication", "0002_user_role"),  # Replace with the actual previous migration
    ]

    operations = [
        # add the create_groups function as an argument to the migrations.RunPython class
        migrations.RunPython(create_quizmasters_group)
    ]

